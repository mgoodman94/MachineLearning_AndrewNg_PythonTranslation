{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute Prediction Weights with Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = np.loadtxt(\"ex1data1.txt\", delimiter=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = matrix[:, 0] # city population\n",
    "y = matrix[:, 1] # food truck profit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = len(y) # number of training examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x19716af5808>"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "theta = np.zeros(2) # initialize theta\n",
    "num_iter = 1500 # iterations for gradient descent\n",
    "alpha = 0.01 # learning rate\n",
    "\n",
    "x_ones = np.ones(m) # create ones column for x\n",
    "X = np.column_stack((x_ones, X)) # merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cost function = 1/2m * sum((h-y)^2)\n",
    "def compute_cost(X, y, theta, m):\n",
    "    J = 0\n",
    "    \n",
    "    h = X.dot(theta.transpose()) # 97x2 * 2x1 = 97x1\n",
    "    errors = np.square(h - y) # 97x1\n",
    "    J = 1/(2*m) * sum(errors) # 1x1\n",
    "    \n",
    "    return J"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32.072733877455654"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compute_cost(x, y, theta, m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradient_descent(X, y, theta, alpha, num_iter, m):\n",
    "    J_history = np.zeros(num_iter) \n",
    "    \n",
    "    # adjust theta, compute cost with new theta, repeat x num_iter\n",
    "    for i in range(num_iter):\n",
    "        \n",
    "        h = X.dot(theta.transpose())\n",
    "        errors = (h - y) # 97x1\n",
    "        theta_delta = (1/m) * alpha * (X.transpose().dot(errors))  \n",
    "        theta -= theta_delta # adjust theta\n",
    "    \n",
    "        J_history[i] = compute_cost(X, y, theta, m) # store cost for that theta\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "gradient_descent(X, y, theta, alpha, num_iter, m)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot findings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot prediction line over scatterplot\n",
    "plt.scatter(X[:,1], y)\n",
    "line = X.dot(theta) # 97x2 * 2x1 = 97x1\n",
    "\n",
    "plt.plot(X[:,1], line, '-r', label=\"y = x*%f + %f\" % (theta[1], theta[0]))\n",
    "plt.title(\"Prediction of food truck profit by city population\")\n",
    "plt.xlabel(\"City Population (per 10000)\")\n",
    "plt.ylabel(\"Food Truck Profit (per $10000)\")\n",
    "plt.legend(loc=\"upper left\")\n",
    "\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
